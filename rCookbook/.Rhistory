q <- seq(from 0 , to =3, by = 0.5)
q <- seq(from =0 , to =3, by = 0.5)
q
pnorm(q)
pnorm(q)
tbl <- data.frame(Quant = q, Lower = pnorm(-q), Upper = prnorm(q))
q
tbl <- data.frame(Quant = q, Lower = pnorm(-q), Upper = pnorm(q))
tbl
rount(pnorm(-q),3)
samp <- read.csv("data.csv")
samp <- read.csv("data.csv")
getwd()
setwd("D://rLecture//rCookbook")
samp <- read.csv("data.csv")
samp
?read.csv
samp <- read.csv("data.csv", header=FALSE)
samp
samp <- read.csv("data2.csv", header=FALSE, sep=";")
samp
samp2 <- read.csv("data2.csv", header=FALSE, sep=";")
samp2
#####################################
# 5.2 Inserting Data into a Vector
#####################################
1:10
append(1:10, 99, after = 5)
append(1:10, 99, after = 0)
x <- 1:10
y <- 10:19
z <- cbind(x,y)
z
z <- cbind(z,a)
z <- cbind(x,a)
a <- 1:6
z <- cbind(x,a)
z
x <- 1:10
y <- 10:19
z1 <- cbind(x,y)
z
a <- 1:6
# if row count is not matching iter the value
z2 <- cbind(x,a)
z1
z2
z3 <- rbind(z1,ze)
z3 <- rbind(z1,z2)
z3
# cbind rbind
x0 <- 1:10
y0 <- 10:19
z0 <- cbind(x0,y0,y0)
z3 <- rbind(z0,z2)
# rbind must match number of columns
z3 <- rbind(z1,z0)
iris
head(iris)
summary(iris)
iris$Sepal.Length''
iris$Sepal.Length
# 데이터 특정컬럼 선택
length(iris$Sepal.Length)
# 데이터 특정컬럼만 선택
iris$Sepal.Length
# 데이터 특정행 값만 선택
iris$Sepal.Length[10]
iris$Sepal.Length[4.9]
iris[iris$Sepal.Length==4.9]
iris$Sepal.Length==4.9
iris(iris$Sepal.Length==4.9)
iris[[iris$Sepal.Length==4.9]]
iris[iris$Sepal.Length==4.9,]
x <- matrix(m,3,2)
x
m<-c(1:6)
x <- matrix(m,3,2)
x
t(x)
x %% y
x%^% y
diag(x)
a*b
a <- c(1:5)
b <- c(2:6)
a*b
x %*% m
class(samp)
samp
s <- subset(samp, subset = (x2 > 3))
s <- subset(samp, subset = (V2 > 3))
s
## Extracting Specific rows
## using condition
s <- subset(samp, subset = (V2 > 3))
s
## Extracting Specific rows
## using condition
s <- subset(samp, subset = (V2 == 3))
s
## Extracting Specific rows
## using condition
s <- subset(samp, subset = (V3 == 4))
## Extracting Specific rows
## using condition
s <- subset(samp, subset = (V2 == 2))
s
## Extracting Specific rows
## using condition
s <- subset(samp, subset = (V2 > 2))
s
t <- subset(samp, subset = (V2 > 2))
t <- subset(samp, subset = (V2 > 2))$x1
t
subset(samp, subset = (V2 > 2))$V1
t
t
t <- subset(samp, subset = (V2 > 2))$V1
t
samp[samp$Sepal.v2>2,]
samp[samp$v2>2,]
ans
ans <- samp[samp$v2>2,]
ans
samp$v2
samp
samp$V2
ans <- samp[samp$V2>2,]
ans
ans <- samp[samp$V2>2,]$V2
ans
t <- subset(samp, subset = (V2 > 2))$V1
t
t <- subset(samp, subset = (V2 > 2))$V2
t
ans <- samp[samp$V2>2,]$V2
ans
#####################################
#5.25 Changing the Names of Data Frame Columns
#####################################
# as dataframe
x <- matrix( c(1,2,3,4), 2,2)
y <- matrix(tempVector,2,2)
z <- matrix(tempVector,2,2, byrow=2)
z
as.data.frame(z)
class(z)
z
class(z)
df2 <-as.data.frame(z)
class(df2)
df2
df2.head
df2.head()
df2
colnames(df2) <- c("before","treatment")
df2
rm(list=ls())
x = rnorm(100)
x
# avg = 10 std = 1
x = rnorm(100,10,1)
x
y = 2x+1
y = 2 * x + 1
plot(x,y)
# y = 2 * x + 1   + error
# x = c(1:100)
# e 입실론 = rnorm(100,0,1)
e = nrorm(100,0,1)
# y = 2 * x + 1   + error
# x = c(1:100)
# e 입실론 = rnorm(100,0,1)
e = nnorm(100,0,1)
# y = 2 * x + 1   + error
# x = c(1:100)
# e 입실론 = rnorm(100,0,1)
e = rnorm(100,0,1)
e
y = 2 * x + 1 + e
plot(x,t)
plot(x,y)
e = rnorm(100, sd = 0.1)
e
y = 2 * x + 1 + e
plot(x,y)
e = rnorm(100, sd = 0.5)
e
y = 2 * x + 1 + e
plot(x,y)
x = c(1:100)
y = 2* x +1 +e
plot(x,y)
e = rnorm(100, sd = 05)
#
x = c(1:100)
y = 2* x +1 +e
plot(x,y)
# y = 2 * x + 1   + error
# x = c(1:100)
# e 입실론 = rnorm(100,0,1)
e = rnorm(100,0,1)
e = rnorm(100, sd = 05)
e
y = 2 * x + 1 + e
plot(x,y)
x = rnorm(100, mean = 10, sd = 5)
y = 3 * x + 10 + e
plot(x,y)
?lm
lm(y ~ x)
abline(1)
plot(x,y)
abline(1)
l = lm(y ~ x)
abline(l)
l
x = rnorm(100, mean = 10, sd = 5)
e = rnorm(100, sd = 5)
y = 3 * x + 10 + e
plot(x,y)
# lm model
?lm
l = lm(y ~ x)
abline(l)
l
summary(1)
summary(l)
getwd()
setwd("D:/rLecture/rCookbook")
fix(Boston )
fix(Boston)
names(Boston)
fix(Boston)
load(Boston)
load(Boston)
fix(Boston)
fix(Boston)
names(Boston)
fix(Boston)
install.packages("ISLR")
## library load
library(ISLR)
fix(Boston)
load(Boston)
fix(Boston)
#Loading Library
#install.packages("data.table")
library(data.table)
#Defining Working Directory
getwd()
setwd("D://rLecture//rCookbook")
#####################################
# Creating Dataframe
dateIndex = c('2017-12-01','2017-12-02','2017-12-03','2017-12-04','2017-12-05','2017-12-06')
productNameList = c('REF','TV','MOBILE','REF','MOBILE',"")
volumeList = c(1000,2000,1500,1200,1700,1000)
testDf <- data.frame( date = dateIndex,
product = productNameList,
volume = volumeList)
#####################################
# Loading Dataframe
#################### READ FILE
sales_csv_file <- file.path(root_dir, "//data//sample_kopo.csv")
#####################################
# Loading Dataframe
#################### READ FILE
sales_csv_file <- "//data//sample_kopo.csv"
sales <- fread(sales_csv_file, check.names = T)
#####################################
# Loading Dataframe
#################### READ FILE
getwd()
sales_csv_file <- getwd()+"//data//sample_kopo.csv"
#####################################
# Loading Dataframe
#################### READ FILE
getwd()
sales_csv_file <- file.path(getwd(), "//data//sample_kopo.csv")
sales <- fread(sales_csv_file, check.names = T)
## datatable
testDt <- data.table(testDf)
## selecting Specific Columns
testDtSelectColumns = testDt[, .(product)]
## selecting Specific Row
testDtSelectRows = testDt[product %in% c("REF","TV") & volume >= 1000]
testDtSelectRows = testDt[product == "REF" & volume >= 1000]
View(testDf)
View(sales)
## selecting Specific Row
testDtSelectRows = salesDt[product %in% c("PRODUCT1","PRODUCT2") & volume >= 1000]
## datatable
salesDt <- data.table(testDf)
## selecting Specific Columns
testDtSelectColumns = salesDt[, .(product)]
## selecting Specific Row
testDtSelectRows = salesDt[product %in% c("PRODUCT1","PRODUCT2") & volume >= 1000]
View(sales)
## selecting missingValue
testDtMissingValue = testDt[is.na(Capa)]
View(testDt)
## selecting missingValue
testDtMissingValue = salesDt[is.na(Capa)]
View(salesDt)
## datatable
salesDt <- data.table(testDf)
sales_csv_file <- getwd()+"//data//sample_kopo.csv"
#####################################
# Loading Dataframe
#################### READ FILE
sales_csv_file <- file.path(getwd(), "//data//sample_kopo.csv")
sales_csv_file <- getwd()+"//data//sample_kopo.csv"
#Loading Library
#install.packages("data.table")
library(data.table)
#Defining Working Directory
getwd()
setwd("D://rLecture//rCookbook")
#####################################
# Creating Dataframe
dateIndex = c('2017-12-01','2017-12-02','2017-12-03','2017-12-04','2017-12-05','2017-12-06')
productNameList = c('REF','TV','MOBILE','REF','MOBILE',"")
volumeList = c(1000,2000,1500,1200,1700,1000)
testDf <- data.frame( date = dateIndex,
product = productNameList,
volume = volumeList)
#####################################
# Loading Dataframe
#################### READ FILE
sales_csv_file <- file.path(getwd(), "//data//sample_kopo.csv")
sales_csv_file <- getwd()+"//data//sample_kopo.csv"
#####################################
# Loading Dataframe
#################### READ FILE
sales_csv_file <- file.path(getwd(), "//data//sample_kopo.csv")
## datatable
salesDt <- data.table(testDf)
salesDf <- fread(sales_csv_file, check.names = T)
## datatable
salesDt <- data.table(salesDf)
## selecting Specific Columns
testDtSelectColumns = salesDt[, .(product)]
## selecting Specific Row
testDtSelectRows = salesDt[product %in% c("PRODUCT1","PRODUCT2") & volume >= 1000]
## selecting Specific Row
testDtSelectRows = salesDt[product %in% c("PRODUCT1","PRODUCT2") & sales_qty >= 1000]
testDtSelectRows = salesDt[product == "PRODUCT1" & sales_qty >= 1000]
## selecting missingValue
testDtMissingValue = salesDt[is.na(Capa)]
View(testDtMissingValue)
## selecting missingValue
testDtMissingValue = salesDt[product=="-"]
## selecting missingValue
testDtMissingValue = salesDt[Capa=="-"]
View(testDtMissingValue)
testDtMissingValue = salesDt[is.na]
testDtMissingValue = salesDt[is.na(salesDf)]
testDtMissingValue = salesDt[is.na(x)]
## selecting missingValue
testDtMissingValue = salesDt[Capa=="-", Capa := 500]
View(testDtMissingValue)
testDtMissingValue.dtyps
class(testDtMissingValue)
testDtMissingValue = salesDt[is.na(Capa)]
## Sorting Data
testDtMissingValue
## Sorting Data
salesDt
## Grouping Data
by.var <- c(seg, 'Year', 'Mon')
testDtGroupValue <- salesDt[, .(sales_qty = sum(sales_qty)), by = by.var, with = T]
## Grouping Data
seg <- c('subsidiary', 'product')
by.var <- c(seg, 'Year', 'Mon')
testDtGroupValue <- salesDt[, .(sales_qty = sum(sales_qty)), by = by.var, with = T]
by.var <- c(seg, 'year', 'mon')
testDtGroupValue <- salesDt[, .(sales_qty = sum(sales_qty)), by = by.var, with = T]
View(testDtGroupValue)
## Defining Seg
seg <- c('subsidiary', 'product')
## Sorting Data
by.var <- c(seg, 'mon')
setkeyv(salesDt, by.var)
View(salesDt)
## Grouping Data
by.var <- c(seg, 'year', 'mon')
testDtGroupValue <- salesDt[, .(sales_qty = sum(sales_qty)), by = by.var, with = T]
View(testDtGroupValue)
## Grouping Data
by.var <- c(seg, 'year', 'mon')
testDtGroupValue <- salesDt[, .(sales_qty = sum(sales_qty)), by = by.var, with = T]
View(testDtGroupValue)
View(salesDt)
testDtMergeValue <- salesDt[testDtGroupValue,on=c(seg,"year","mon")]
View(testDtMergeValue)
View(testDtMergeValue)
testDtGroupValue <- salesDt[, .(sales_qty = avg(sales_qty)), by = by.var, with = T]
testDtGroupValue <- salesDt[, .(sales_qty = mean(sales_qty)), by = by.var, with = T]
## Joining Data
## merge preDefinedData set data
testDtMergeValue <- salesDt[testDtGroupValue,on=c(seg,"year","mon")]
testDtGroupValue <- salesDt[, sales_qty_avg := i.sales_qty,.(sales_qty = mean(sales_qty)), by = by.var, with = T]
## Grouping Data
by.var <- c(seg, 'year', 'mon')
testDtGroupValue <- salesDt[, sales_qty_avg := i.sales_qty,.(sales_qty = mean(sales_qty)), by = by.var, with = T]
testDtGroupValue <- salesDt[, sales_qty_avg := sales_qty, .(sales_qty = mean(sales_qty)), by = by.var, with = T]
testDtGroupValue <- salesDt[,  .(sales_qty = mean(sales_qty)), by = by.var, with = T]
View(testDtGroupValue)
View(testDtGroupValue)
## Joining Data
## merge preDefinedData set data
testDtMergeValue <- salesDt[sales_qty_avg := sales_qty,testDtGroupValue,on=c(seg,"year","mon")]
## Grouping Data
by.var <- c(seg, 'year', 'mon')
testDtGroupValue <- salesDt[,  .(sales_qty = mean(sales_qty)), by = by.var, with = T]
testDtMergeValue <- salesDt[testDtGroupValue,
sales_qty_avg := i.sales_qty,
on=c(seg,"year","mon")]
View(testDtMergeValue)
##
testDtCalcValue <- testDtMergeValue[, calc_value := sales_qty/sales_qty_avg ]
View(testDtCalcValue)
View(testDtMissingValue)
## selecting missingValue
## change Value
testDtMissingValue = salesDt[Capa=="-", Capa := 500]
View(testDtMissingValue)
## selecting Specific Columns
## [condition, .(columns)]
testDtSelectColumns = salesDt[, .(product,year)]
## selecting Specific Columns
## [condition, .(columns)]
testDtSelectColumns = salesDt[, (product,year)]
## selecting Specific Columns
## [condition, .(columns)]
testDtSelectColumns = salesDt[, .c(product,year)]
## selecting Specific Columns
## [condition, .(column list)]
testDtSelectColumns = salesDt[, .(product,year)]
View(testDtSelectColumns)
#####################################
# 4.5 Dealing with “Cannot Open File” in Windows
#####################################
getwd()
setwd("D://rLecture//rCookbook")
samp <- read.csv("//data//data.csv")
samp
# header = FASLE , sep option can be changed
samp <- read.csv("data.csv", header=FALSE)
# header = FASLE , sep option can be changed
samp <- read.csv("//data//data.csv", header=FALSE)
#####################################
# 4.5 Dealing with “Cannot Open File” in Windows
#####################################
getwd()
setwd("D://rLecture//rCookbook")
samp <- read.csv("//data//data.csv")
samp <- read.csv("/data//data.csv")
samp <- read.csv("./data/data.csv")
# header = FASLE , sep option can be changed
samp <- read.csv("./data/data.csv", header=FALSE)
# header = FASLE , sep option can be changed
samp <- read.csv("./data/data.csv", header=FALSE)
